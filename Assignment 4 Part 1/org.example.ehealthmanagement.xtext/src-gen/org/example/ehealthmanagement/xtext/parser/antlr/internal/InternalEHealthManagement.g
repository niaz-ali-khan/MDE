/*
 * generated by Xtext 2.21.0
 */
grammar InternalEHealthManagement;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.example.ehealthmanagement.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.example.ehealthmanagement.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.example.ehealthmanagement.xtext.services.EHealthManagementGrammarAccess;

}

@parser::members {

 	private EHealthManagementGrammarAccess grammarAccess;

    public InternalEHealthManagementParser(TokenStream input, EHealthManagementGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "User";
   	}

   	@Override
   	protected EHealthManagementGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleUser
entryRuleUser returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUserRule()); }
	iv_ruleUser=ruleUser
	{ $current=$iv_ruleUser.current; }
	EOF;

// Rule User
ruleUser returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUserAccess().getUserAction_0(),
					$current);
			}
		)
		otherlv_1='User'
		{
			newLeafNode(otherlv_1, grammarAccess.getUserAccess().getUserKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getUserAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='UserTypes'
			{
				newLeafNode(otherlv_3, grammarAccess.getUserAccess().getUserTypesKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUserAccess().getUserTypesAllowedUserTypesEnumRuleCall_3_1_0());
					}
					lv_UserTypes_4_0=ruleAllowedUserTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUserRule());
						}
						set(
							$current,
							"UserTypes",
							lv_UserTypes_4_0,
							"org.example.ehealthmanagement.xtext.EHealthManagement.AllowedUserTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getUserAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Rule AllowedUserTypes
ruleAllowedUserTypes returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Doctor'
			{
				$current = grammarAccess.getAllowedUserTypesAccess().getDoctorEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAllowedUserTypesAccess().getDoctorEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Patient'
			{
				$current = grammarAccess.getAllowedUserTypesAccess().getPatientEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAllowedUserTypesAccess().getPatientEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='SystemAdmin'
			{
				$current = grammarAccess.getAllowedUserTypesAccess().getSystemAdminEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAllowedUserTypesAccess().getSystemAdminEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule AllowedUserInterfaces
ruleAllowedUserInterfaces returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ProfileView'
			{
				$current = grammarAccess.getAllowedUserInterfacesAccess().getProfileViewEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAllowedUserInterfacesAccess().getProfileViewEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='InformationView'
			{
				$current = grammarAccess.getAllowedUserInterfacesAccess().getInformationViewEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAllowedUserInterfacesAccess().getInformationViewEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule AllowedRepresentationInterfaceTypes
ruleAllowedRepresentationInterfaceTypes returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='DoctorProfile'
			{
				$current = grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getDoctorProfileEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getDoctorProfileEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='PatientProfile'
			{
				$current = grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getPatientProfileEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getPatientProfileEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='MedicineList'
			{
				$current = grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getMedicineListEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getMedicineListEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='PrescriptionView'
			{
				$current = grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getPrescriptionViewEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getPrescriptionViewEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='DiagnosysView'
			{
				$current = grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getDiagnosysViewEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getDiagnosysViewEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule AllowedCommunicationInterfaceTypes
ruleAllowedCommunicationInterfaceTypes returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='CommunicationView'
			{
				$current = grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getCommunicationViewEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getCommunicationViewEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='NotificationView'
			{
				$current = grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getNotificationViewEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getNotificationViewEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='FeedbackView'
			{
				$current = grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getFeedbackViewEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getFeedbackViewEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
