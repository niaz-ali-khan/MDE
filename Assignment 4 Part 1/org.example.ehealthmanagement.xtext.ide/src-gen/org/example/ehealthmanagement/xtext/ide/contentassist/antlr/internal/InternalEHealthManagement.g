/*
 * generated by Xtext 2.21.0
 */
grammar InternalEHealthManagement;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.example.ehealthmanagement.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.example.ehealthmanagement.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.example.ehealthmanagement.xtext.services.EHealthManagementGrammarAccess;

}
@parser::members {
	private EHealthManagementGrammarAccess grammarAccess;

	public void setGrammarAccess(EHealthManagementGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleUser
entryRuleUser
:
{ before(grammarAccess.getUserRule()); }
	 ruleUser
{ after(grammarAccess.getUserRule()); } 
	 EOF 
;

// Rule User
ruleUser 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUserAccess().getGroup()); }
		(rule__User__Group__0)
		{ after(grammarAccess.getUserAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AllowedUserTypes
ruleAllowedUserTypes
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllowedUserTypesAccess().getAlternatives()); }
		(rule__AllowedUserTypes__Alternatives)
		{ after(grammarAccess.getAllowedUserTypesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AllowedUserInterfaces
ruleAllowedUserInterfaces
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllowedUserInterfacesAccess().getAlternatives()); }
		(rule__AllowedUserInterfaces__Alternatives)
		{ after(grammarAccess.getAllowedUserInterfacesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AllowedRepresentationInterfaceTypes
ruleAllowedRepresentationInterfaceTypes
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getAlternatives()); }
		(rule__AllowedRepresentationInterfaceTypes__Alternatives)
		{ after(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AllowedCommunicationInterfaceTypes
ruleAllowedCommunicationInterfaceTypes
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getAlternatives()); }
		(rule__AllowedCommunicationInterfaceTypes__Alternatives)
		{ after(grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllowedUserTypes__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllowedUserTypesAccess().getDoctorEnumLiteralDeclaration_0()); }
		('Doctor')
		{ after(grammarAccess.getAllowedUserTypesAccess().getDoctorEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAllowedUserTypesAccess().getPatientEnumLiteralDeclaration_1()); }
		('Patient')
		{ after(grammarAccess.getAllowedUserTypesAccess().getPatientEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAllowedUserTypesAccess().getSystemAdminEnumLiteralDeclaration_2()); }
		('SystemAdmin')
		{ after(grammarAccess.getAllowedUserTypesAccess().getSystemAdminEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllowedUserInterfaces__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllowedUserInterfacesAccess().getProfileViewEnumLiteralDeclaration_0()); }
		('ProfileView')
		{ after(grammarAccess.getAllowedUserInterfacesAccess().getProfileViewEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAllowedUserInterfacesAccess().getInformationViewEnumLiteralDeclaration_1()); }
		('InformationView')
		{ after(grammarAccess.getAllowedUserInterfacesAccess().getInformationViewEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllowedRepresentationInterfaceTypes__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getDoctorProfileEnumLiteralDeclaration_0()); }
		('DoctorProfile')
		{ after(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getDoctorProfileEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getPatientProfileEnumLiteralDeclaration_1()); }
		('PatientProfile')
		{ after(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getPatientProfileEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getMedicineListEnumLiteralDeclaration_2()); }
		('MedicineList')
		{ after(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getMedicineListEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getPrescriptionViewEnumLiteralDeclaration_3()); }
		('PrescriptionView')
		{ after(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getPrescriptionViewEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getDiagnosysViewEnumLiteralDeclaration_4()); }
		('DiagnosysView')
		{ after(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getDiagnosysViewEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllowedCommunicationInterfaceTypes__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getCommunicationViewEnumLiteralDeclaration_0()); }
		('CommunicationView')
		{ after(grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getCommunicationViewEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getNotificationViewEnumLiteralDeclaration_1()); }
		('NotificationView')
		{ after(grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getNotificationViewEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getFeedbackViewEnumLiteralDeclaration_2()); }
		('FeedbackView')
		{ after(grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getFeedbackViewEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User__Group__0__Impl
	rule__User__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserAccess().getUserAction_0()); }
	()
	{ after(grammarAccess.getUserAccess().getUserAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User__Group__1__Impl
	rule__User__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserAccess().getUserKeyword_1()); }
	'User'
	{ after(grammarAccess.getUserAccess().getUserKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User__Group__2__Impl
	rule__User__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getUserAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User__Group__3__Impl
	rule__User__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserAccess().getGroup_3()); }
	(rule__User__Group_3__0)?
	{ after(grammarAccess.getUserAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getUserAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__User__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User__Group_3__0__Impl
	rule__User__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserAccess().getUserTypesKeyword_3_0()); }
	'UserTypes'
	{ after(grammarAccess.getUserAccess().getUserTypesKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__User__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserAccess().getUserTypesAssignment_3_1()); }
	(rule__User__UserTypesAssignment_3_1)
	{ after(grammarAccess.getUserAccess().getUserTypesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__User__UserTypesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUserAccess().getUserTypesAllowedUserTypesEnumRuleCall_3_1_0()); }
		ruleAllowedUserTypes
		{ after(grammarAccess.getUserAccess().getUserTypesAllowedUserTypesEnumRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
