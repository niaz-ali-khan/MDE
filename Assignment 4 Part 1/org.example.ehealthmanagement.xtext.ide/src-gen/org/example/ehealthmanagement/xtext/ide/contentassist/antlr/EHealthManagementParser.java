/*
 * generated by Xtext 2.21.0
 */
package org.example.ehealthmanagement.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.ehealthmanagement.xtext.ide.contentassist.antlr.internal.InternalEHealthManagementParser;
import org.example.ehealthmanagement.xtext.services.EHealthManagementGrammarAccess;

public class EHealthManagementParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(EHealthManagementGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, EHealthManagementGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAllowedUserTypesAccess().getAlternatives(), "rule__AllowedUserTypes__Alternatives");
			builder.put(grammarAccess.getAllowedUserInterfacesAccess().getAlternatives(), "rule__AllowedUserInterfaces__Alternatives");
			builder.put(grammarAccess.getAllowedRepresentationInterfaceTypesAccess().getAlternatives(), "rule__AllowedRepresentationInterfaceTypes__Alternatives");
			builder.put(grammarAccess.getAllowedCommunicationInterfaceTypesAccess().getAlternatives(), "rule__AllowedCommunicationInterfaceTypes__Alternatives");
			builder.put(grammarAccess.getUserAccess().getGroup(), "rule__User__Group__0");
			builder.put(grammarAccess.getUserAccess().getGroup_3(), "rule__User__Group_3__0");
			builder.put(grammarAccess.getUserInterfaceAccess().getGroup(), "rule__UserInterface__Group__0");
			builder.put(grammarAccess.getUserInterfaceAccess().getGroup_3(), "rule__UserInterface__Group_3__0");
			builder.put(grammarAccess.getRepresentationInterfaceAccess().getGroup(), "rule__RepresentationInterface__Group__0");
			builder.put(grammarAccess.getRepresentationInterfaceAccess().getGroup_3(), "rule__RepresentationInterface__Group_3__0");
			builder.put(grammarAccess.getCommunicationInterfaceAccess().getGroup(), "rule__CommunicationInterface__Group__0");
			builder.put(grammarAccess.getCommunicationInterfaceAccess().getGroup_3(), "rule__CommunicationInterface__Group_3__0");
			builder.put(grammarAccess.getUserAccess().getUserTypesAssignment_3_1(), "rule__User__UserTypesAssignment_3_1");
			builder.put(grammarAccess.getUserInterfaceAccess().getUserInterfacesAssignment_3_1(), "rule__UserInterface__UserInterfacesAssignment_3_1");
			builder.put(grammarAccess.getRepresentationInterfaceAccess().getRepresentationInterfacesAssignment_3_1(), "rule__RepresentationInterface__RepresentationInterfacesAssignment_3_1");
			builder.put(grammarAccess.getCommunicationInterfaceAccess().getCommunicationInterfacesAssignment_3_1(), "rule__CommunicationInterface__CommunicationInterfacesAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private EHealthManagementGrammarAccess grammarAccess;

	@Override
	protected InternalEHealthManagementParser createParser() {
		InternalEHealthManagementParser result = new InternalEHealthManagementParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EHealthManagementGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EHealthManagementGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
